name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-python:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/') && contains(github.repository, 'NicholasMcCarthy/pdf2anki')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -n "$TWINE_PASSWORD" ]; then
          twine upload dist/*
        else
          echo "PyPI token not available, skipping upload"
        fi

  build-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push Docker image (standard)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ENABLE_OCR=false
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Docker image (with OCR)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-ocr
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-ocr
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ENABLE_OCR=true
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    needs: [build-python, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract version from CHANGELOG if it exists
        if [ -f "CHANGELOG.md" ]; then
          # Try to extract section for this version
          NOTES=$(awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md)
        fi
        
        if [ -z "$NOTES" ]; then
          NOTES="Release $VERSION

## Changes
- See commit history for detailed changes

## Installation

### Python Package
\`\`\`bash
pip install pdf2anki==$VERSION
\`\`\`

### Docker
\`\`\`bash
docker pull ghcr.io/nicholasmccarthy/pdf2anki:$VERSION
\`\`\`

### Docker with OCR support
\`\`\`bash
docker pull ghcr.io/nicholasmccarthy/pdf2anki:$VERSION-ocr
\`\`\`"
        fi
        
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.release_notes.outputs.version }}
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: python-packages
        asset_content_type: application/zip